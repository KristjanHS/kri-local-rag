[project]
name = "kri-local-rag"
version = "0.1.0"
description = "A local RAG implementation with Weaviate and Ollama."
authors = [{ name="Kristjan Sillmann"}]
readme = "README.md"
requires-python = ">=3.12"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = ["cli"]
packages = ["backend", "frontend"]

[project.scripts]
kri-local-rag = "cli:main"

[tool.ruff]
line-length = 120
exclude = [".git", "__pycache__", ".venv", "venv", "build", "dist"]

[tool.ruff.lint]
# E203: whitespace-before-punctuation
# W503: line-break-before-binary-operator
# E401: multiple-imports-on-one-line
# E302: expected-2-blank-lines-found-1
# E305: expected-2-blank-lines-after-function-or-class
# E402: module-import-not-at-top-of-file
ignore = ["E203", "E401", "E302", "E305", "E402"]
select = ["E", "F", "W", "T201"]

[tool.ruff.format]
quote-style = "double"

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "-v",
    "--tb=short",
    "--cov=backend",
    "--cov=frontend",
    "--cov-report=term-missing",
    "--cov-report=html:reports/coverage",
    "--ignore=tests/unit/test_debug.py",
    "--ignore=tests/unit/test_logging.py",
    "--ignore=tests/unit/test_search_logic_archived.py",
    "--strict-markers",  # Ensure all markers are registered
]
markers = [
    "slow: Tests that take longer to run (>30s)",
    "docker: Tests requiring a running Docker daemon",
    "external: Tests that require external services (Weaviate, Ollama)",
    "requires_weaviate: Tests that require Weaviate service",
    "requires_ollama: Tests that require Ollama service",
]
testpaths = [
    "tests/unit",
    "tests/integration",
    "tests/e2e",
]

# Unified logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s %(levelname)s %(name)s - %(message)s"
log_cli_date_format = "%Y-%m-%dT%H:%M:%S"
log_file = "reports/test_session.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s %(name)s - %(message)s"
log_file_date_format = "%Y-%m-%dT%H:%M:%S"

[tool.deptry]
# --- Where to read declared dependencies ------------------------------
requirements_files       = ["requirements.txt"]
requirements_files_dev   = ["requirements-dev.txt"]   # only dev tools here

# --- What to scan / skip ----------------------------------------------
# keep default excludes (.venv, .git, tests, etc.) and add a few more
extend_exclude           = ["docs", "dist", "build"]
ignore_notebooks         = true                       # faster on mixed repos

# --- Tell Deptry these folders are *first-party* code ------------------
known_first_party        = ["backend", "frontend", "scripts"]

# --- Handle edge-cases -------------------------------------------------
experimental_namespace_package = true                 # recognise PEP-420 pkgs
# Map weird wheels â†’ import names (example)

# avoids false DEP003 in src-layout
json_output  = "deptry_report.json"      # for CI artifacts

[tool.deptry.package_module_name_map]
python-dotenv = ["dotenv"]
weaviate-client = ["weaviate"]  # if you ever install it optional-only
langchain-community = ["langchain_community"]

[project.optional-dependencies]
# Testing dependencies
test = [
    "pytest>=7.0,<8.0",
    "pytest-cov>=4.0,<5.0",
    "pytest-xdist>=3.0,<4.0",
    "pytest-mock>=3.0,<4.0",
    "pytest-docker>=2.0,<3.0",
    "pytest-html>=3.0,<4.0",
    "pytest-socket>=0.6.0,<1.0",
    "requests>=2.31,<3.0",
    "testcontainers>=3.7.0,<4.0",
    "protobuf>=5.26,<7.0",
    "rich>=13.0,<14.0",
    "tomli>=2.0.0,<3.0; python_version<'3.11'",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0,<2.0",
]

# UI testing dependencies
ui = [
    "pytest-playwright==0.4.4",
    "playwright>=1.45,<2.0",
]

# Development tools (linting, type checking, security)
dev = [
    "ruff==0.12.9",
    "pyright[nodejs]==1.1.403",
    "bandit[toml]==1.8.6",
]

pep621_dev_dependency_groups = ["test", "docs", "ui", "dev"]

[tool.deptry.per_rule_ignores]
DEP002 = ["boto3"]       # AWS libs pulled in indirectly

[tool.coverage.run]
omit = ["tests/ui/*"]
data_file = "reports/coverage/.coverage"

[tool.integration]
# Integration test configuration - single source of truth
# All integration test settings consolidated here

# Service connection settings for different environments
[tool.integration.services]
weaviate = { host_docker = "weaviate", host_local = "localhost", port = 8080, health_endpoint = "/v1/.well-known/ready" }
ollama = { host_docker = "ollama", host_local = "localhost", port = 11434, health_endpoint = "/api/version" }

# Timeout settings for service operations
[tool.integration.timeouts]
timeout_s = 1.0                    # seconds for service availability checks
service_check = 1.0               # seconds for service availability checks (legacy)
cache_duration = 5.0              # seconds to cache service availability
http_timeout = 2.0                # seconds for HTTP health checks
model_loading_timeout = 30.0      # seconds for model loading operations

# Environment-specific settings and URLs
[tool.integration.environments]
docker = { description = "Running inside Docker containers", test_docker = true }
local = { description = "Running on local machine", test_docker = false }

# Service URLs for different environments (Docker vs Local)
[tool.integration.urls]
weaviate_docker = "http://weaviate:8080"
weaviate_local = "http://localhost:8080"
ollama_docker = "http://ollama:11434"
ollama_local = "http://localhost:11434"

# Commands to start/stop services in different environments
[tool.integration.commands]
docker_start = "make test-up"
docker_stop = "make test-down"
local_weaviate_start = "docker run -d -p 8080:8080 semitechnologies/weaviate:latest"
local_ollama_start = "ollama serve"
