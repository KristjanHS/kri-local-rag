[project]
name = "kri-local-rag"
version = "0.1.0"
description = "A local RAG implementation with Weaviate and Ollama."
authors = [{ name="Kristjan Sillmann"}]
readme = "README.md"
requires-python = ">=3.12,<3.13"
dependencies = [
    "httpx>=0.28.1,<0.29.0",
    "langchain>=0.3.27,<0.4.0",
    "langchain-community>=0.3.27,<0.4.0",
    "python-dotenv>=1.1.1,<2.0.0",
    "rich>=14.1.0,<15.0.0",
    "sentence-transformers>=5.1.0,<6.0.0",
    "streamlit>=1.49.1,<2.0.0",
    "torch>=2.8.0,<3.0.0",
    "weaviate-client>=4.16.6,<5.0.0",
]

[dependency-groups]
dev = [
    "bandit[toml]>=1.8.6,<2.0.0",
    "mkdocs>=1.6.1,<2.0.0",
    "pre-commit>=4.3.0,<5.0.0",
    "pyright[nodejs]>=1.1.405,<2.0.0",
    "ruff>=0.12.12,<0.13.0",
]

test = [
    "playwright>=1.55.0,<2.0.0",
    "protobuf>=6.32.0,<7.0.0",
    "pytest>=8.4.2,<9.0.0",
    "pytest-cov>=6.3.0,<7.0.0",
    "pytest-docker>=3.2.3,<4.0.0",
    "pytest-html>=4.1.1,<5.0.0",
    "pytest-mock>=3.15.0,<4.0.0",
    "pytest-playwright>=0.7.1,<0.8.0",
    "pytest-socket>=0.7.0,<0.8.0",
    "pytest-xdist>=3.8.0,<4.0.0",
    "requests>=2.32.5,<3.0.0",
    # Optional runtime deps kept in test group while verifying prod minimal set
    "pdfplumber>=0.11.7,<0.12.0",
    "pillow>=11.3.0,<12.0.0",
    "pymupdf==1.24.10",
    "unstructured[pdf]>=0.14.10,<0.15.0",
    "langdetect>=1.0.9,<2.0.0",
    "numpy>=1.26.0,<3.0.0",
]
 

[tool.uv]
add-bounds = "major"

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
# Add the PyTorch index, but mark it EXPLICIT so nothing comes from it
# unless we explicitly say so in [tool.uv.sources].
explicit = true

# for GPU:
# name = "pytorch-cu128"
# url = "https://download.pytorch.org/whl/cu128"

[tool.uv.sources]
# Only these names are allowed to resolve from that index:
torch = { index = "pytorch-cpu" }
# for GPU:
# torch = { index = "pytorch-cu128"}

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

# Limit package discovery to the Python code under `cli.py` and `backend/` to avoid
# setuptools attempting to package non-Python top-level folders like `docker/` or `logs/`.
[tool.setuptools]
py-modules = ["cli"]
packages = ["backend"]

[project.scripts]
kri-local-rag = "cli:main"

[tool.ruff]
line-length = 120
exclude = [".git", "__pycache__", ".venv", "venv", "build", "dist"]

[tool.ruff.lint]
# E203: whitespace-before-punctuation
# W503: line-break-before-binary-operator
# E401: multiple-imports-on-one-line
# E302: expected-2-blank-lines-found-1
# E305: expected-2-blank-lines-after-function-or-class
# E402: module-import-not-at-top-of-file
ignore = ["E203", "E401", "E302", "E305", "E402"]
select = ["E", "F", "W", "T201"]

[tool.ruff.format]
quote-style = "double"

[tool.pytest.ini_options]
addopts = [
    "-ra",
    "-v",
    "--tb=short",
    "--cov=backend",
    "--cov=frontend",
    "--cov-report=term-missing",
    "--cov-report=html:reports/coverage",
    "--ignore=tests/unit/test_debug.py",
    "--ignore=tests/unit/test_logging.py",
    "--ignore=tests/unit/test_search_logic_archived.py",
    "--strict-markers",  # Ensure all markers are registered
]
markers = [
    "slow: Tests that take longer to run (>30s)",
    "docker: Tests requiring a running Docker daemon",
    "requires_weaviate: Tests that require Weaviate service",
    "requires_ollama: Tests that require Ollama service",
]
testpaths = [
    "tests/unit",
    "tests/integration",
    "tests/e2e",
]

# Unified logging configuration
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s %(levelname)s %(name)s - %(message)s"
log_cli_date_format = "%Y-%m-%dT%H:%M:%S"
log_file = "reports/test_session.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s %(name)s - %(message)s"
log_file_date_format = "%Y-%m-%dT%H:%M:%S"

[tool.deptry]
# --- Where to read declared dependencies ------------------------------
# uv/pyproject-based; no requirements files needed (deptry reads [project])

# --- What to scan / skip ----------------------------------------------
# keep default excludes (.venv, .git, tests, etc.) and add a few more
extend_exclude           = ["docs", "dist", "build"]
ignore_notebooks         = true                       # faster on mixed repos

# --- Tell Deptry these folders are *first-party* code ------------------
known_first_party        = ["backend", "frontend", "scripts"]

# --- Handle edge-cases -------------------------------------------------
experimental_namespace_package = true                 # recognise PEP-420 pkgs
# Map weird wheels â†’ import names (example)

# avoids false DEP003 in src-layout

[tool.deptry.package_module_name_map]
python-dotenv = ["dotenv"]
weaviate-client = ["weaviate"]  # if you ever install it optional-only
langchain-community = ["langchain_community"]


[tool.deptry.per_rule_ignores]
DEP004 = ["numpy"]                                   # optional runtime in vector_utils
DEP002 = [
    "boto3",                                       # AWS libs pulled in indirectly
    "langdetect",                                  # planned/optional language detection
    "pdfplumber", "pillow", "pymupdf", "unstructured",  # PDF backends for loaders
]


[tool.coverage.run]
# Limit measured source to backend package and suppress noisy warnings when
# xdist splits tests that don't execute any measured code in a worker.
source = ["backend"]
omit = ["tests/ui/*"]
disable_warnings = ["no-data-collected"]
data_file = "reports/coverage/.coverage"

# Service health check endpoints
[tool.integration.services]
weaviate = { health_endpoint = "/v1/.well-known/ready" }
ollama = { health_endpoint = "/api/version" }

# Timeout settings for service operations
[tool.integration.timeouts]
timeout_s = 1.0                    # seconds for service availability checks
service_check = 1.0               # seconds for service availability checks (legacy)
cache_duration = 5.0              # seconds to cache service availability
http_timeout = 2.0                # seconds for HTTP health checks
model_loading_timeout = 30.0      # seconds for model loading operations

# Environment descriptions (for documentation)
[tool.integration.environments]
docker = { description = "Running inside Docker containers with service URLs set via environment variables" }
local = { description = "Running on local machine with localhost URLs" }

# Commands to start/stop services in different environments
[tool.integration.commands]
docker_start = "make test-up"
docker_stop = "make test-down"
local_weaviate_start = "docker run -d -p 8080:8080 semitechnologies/weaviate:latest"
local_ollama_start = "ollama serve"
