#!/usr/bin/env bash
# Git post-push hook: run local integration tests and log results
# - Uses project logging utilities (scripts/common.sh)
# - Runs tests directly via .venv/bin/python -m pytest tests/integration -q
# - Opt-out: set SKIP_POST_PUSH_TESTS=1

set -Eeuo pipefail

ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$ROOT_DIR"

# shellcheck source=../scripts/common.sh
source "$ROOT_DIR/scripts/common.sh"

script_name="post-push"
LOG_FILE=$(init_script_logging "$script_name")
enable_error_trap "$LOG_FILE" "$script_name"
enable_debug_trace "$LOG_FILE"

log INFO "Post-push hook triggered (repo: $ROOT_DIR)"

if [[ "${SKIP_POST_PUSH_TESTS:-0}" == "1" ]]; then
  log WARN "SKIP_POST_PUSH_TESTS=1 — skipping local integration tests"
  exit 0
fi

if [[ ! -x ".venv/bin/python" ]]; then
  log ERROR ".venv/bin/python not found — cannot run integration tests"
  log INFO "Create venv: python3 -m venv .venv && .venv/bin/pip install -r requirements-dev.txt"
  exit 1
fi

log INFO "Running local integration tests via .venv/bin/python …"
mkdir -p reports || true
CMD=( .venv/bin/python -m pytest tests/integration -q )
log INFO "Command: ${CMD[*]}"
set -o pipefail
"${CMD[@]}" 2>&1 | sed 's/^/[integration-local] /' | tee -a "$LOG_FILE" || true
TEST_RC=${PIPESTATUS[0]:-1}

if [[ $TEST_RC -eq 0 ]]; then
  log INFO "Post-push: integration tests passed"
else
  log ERROR "Post-push: integration tests failed (exit $TEST_RC)."
fi

# --------------------------- Local auto PR -----------------------------------
# Use GitHub CLI 'gh' with standard flags to open or create a PR.
# Simple defaults; no custom body/templating beyond --fill.
# Controls:
#   SKIP_AUTO_PR=1     -> skip PR creation
#   AUTO_PR_BASE=main  -> base branch
#   AUTO_PR_ALWAYS=1   -> create PR even if tests failed

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
BASE_BRANCH=${AUTO_PR_BASE:-main}

if [[ "${SKIP_AUTO_PR:-0}" == "1" ]]; then
  log INFO "SKIP_AUTO_PR=1 — skipping PR creation"
else
  if [[ "$CURRENT_BRANCH" =~ ^(main|master|develop)$ ]]; then
    log INFO "On protected branch '$CURRENT_BRANCH' — not creating PR."
  else
    if command -v gh >/dev/null 2>&1; then
      if [[ $TEST_RC -ne 0 && "${AUTO_PR_ALWAYS:-0}" != "1" ]]; then
        log WARN "Tests failed; skipping PR creation (set AUTO_PR_ALWAYS=1 to override)."
      else
        log INFO "Creating or viewing PR via 'gh pr create --fill'…"
        # Try to create a PR with standard flags; if it already exists, fall back to viewing it.
        if gh pr create --base "$BASE_BRANCH" --head "$CURRENT_BRANCH" --fill --label auto-generated >/dev/null 2>&1; then
          : # created successfully
        else
          log INFO "PR may already exist; showing existing PR URL."
        fi
        PR_URL=$(gh pr view --head "$CURRENT_BRANCH" --json url -q .url 2>/dev/null || echo '')
        if [[ -n "$PR_URL" ]]; then
          log INFO "PR: $PR_URL"
        else
          log WARN "Unable to resolve PR URL. You can run: gh pr create --base $BASE_BRANCH --head $CURRENT_BRANCH --fill"
        fi
      fi
    else
      log WARN "GitHub CLI 'gh' not found; skipping PR creation. Install: https://cli.github.com/"
    fi
  fi
fi

exit "$TEST_RC"
