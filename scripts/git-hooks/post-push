#!/usr/bin/env bash
# Git post-push hook: run local integration tests and log results
# - Uses project logging utilities (scripts/common.sh)
# - Runs tests directly via .venv/bin/python -m pytest tests/integration -q
# - Opt-out: set SKIP_POST_PUSH_TESTS=1

set -Eeuo pipefail

ROOT_DIR="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
cd "$ROOT_DIR"

# shellcheck source=../scripts/common.sh
source "$ROOT_DIR/scripts/common.sh"

script_name="post-push"
LOG_FILE=$(init_script_logging "$script_name")
enable_error_trap "$LOG_FILE" "$script_name"
enable_debug_trace "$LOG_FILE"

# Mirror all stdout/stderr to the log file
exec > >(tee -a "$LOG_FILE") 2>&1

log INFO "Post-push hook triggered (repo: $ROOT_DIR)"

if [[ "${SKIP_POST_PUSH_TESTS:-0}" == "1" ]]; then
  log WARN "SKIP_POST_PUSH_TESTS=1 — skipping local integration tests"
  exit 0
fi

if [[ ! -x ".venv/bin/python" ]]; then
  log ERROR ".venv/bin/python not found — cannot run integration tests"
  log INFO "Create venv: python3 -m venv .venv && .venv/bin/pip install -r requirements-dev.txt"
  exit 1
fi

log INFO "Running local integration tests via .venv/bin/python …"
mkdir -p reports || true
# Allow optional extra pytest args via POST_PUSH_PYTEST_ARGS
EXTRA_ARGS=${POST_PUSH_PYTEST_ARGS:-}
CMD=( .venv/bin/python -m pytest tests/integration -q ${EXTRA_ARGS} )
log INFO "Command: ${CMD[*]}"
set -o pipefail
"${CMD[@]}" 2>&1 | sed 's/^/[integration-local] /' || true
TEST_RC=${PIPESTATUS[0]:-1}

if [[ $TEST_RC -eq 0 ]]; then
  log INFO "Post-push: integration tests passed"
else
  log ERROR "Post-push: integration tests failed (exit $TEST_RC)."
fi

# --------------------------- Local auto PR -----------------------------------
# Use GitHub CLI 'gh' with standard flags to open or create a PR.
# Simple defaults; no custom body/templating beyond --fill.
# Controls:
#   SKIP_AUTO_PR=1     -> skip PR creation
#   AUTO_PR_BASE=main  -> base branch
#   AUTO_PR_ALWAYS=1   -> create PR even if tests failed

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
BASE_BRANCH=${AUTO_PR_BASE:-main}
# Allow overriding the head branch explicitly (defaults to the current branch)
HEAD_BRANCH=${AUTO_PR_HEAD:-$CURRENT_BRANCH}

if [[ "${SKIP_AUTO_PR:-0}" == "1" ]]; then
  log INFO "SKIP_AUTO_PR=1 — skipping PR creation"
else
  # Skip only when the PR head equals the base (e.g., main→main)
  if [[ "$HEAD_BRANCH" == "$BASE_BRANCH" ]]; then
    log INFO "Head equals base ('$HEAD_BRANCH'); not creating PR."
  else
    if command -v gh >/dev/null 2>&1; then
      if [[ $TEST_RC -ne 0 && "${AUTO_PR_ALWAYS:-0}" != "1" ]]; then
        log WARN "Tests failed; skipping PR creation (set AUTO_PR_ALWAYS=1 to override)."
      else
        # Ensure gh is authenticated
        if ! gh auth status >/dev/null 2>&1; then
          log WARN "GitHub CLI not authenticated. Run: gh auth login"
        else
          # Optionally ensure the head branch has an upstream and is pushed
          if [[ "${AUTO_PR_PUSH_IF_NEEDED:-1}" == "1" ]]; then
            if ! git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then
              remote=${AUTO_PR_REMOTE:-origin}
              log INFO "No upstream set for '$HEAD_BRANCH'; pushing to '$remote'…"
              if ! git push -u "$remote" "$HEAD_BRANCH" 2>&1 | sed 's/^/[git] /' | tee -a "$LOG_FILE" >/dev/null; then
                log WARN "Failed to push branch '$HEAD_BRANCH' to '$remote'. PR creation may fail."
              fi
            fi
          fi

          # Resolve the GitHub repository name (owner/repo)
          REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null || echo "")
          if [[ -z "$REPO" ]]; then
            log WARN "Unable to resolve GitHub repo from gh CLI. Ensure remote points to GitHub."
          else
            log INFO "Repository: $REPO"
          fi

          log INFO "Creating or viewing PR via 'gh pr create --fill' (head=$HEAD_BRANCH, base=$BASE_BRANCH)…"
          # Try to create; if it fails, capture output for diagnostics
          if [[ -n "$REPO" ]]; then
            CREATE_OUT=$(gh pr create -R "$REPO" --base "$BASE_BRANCH" --head "$HEAD_BRANCH" --fill --label auto-generated 2>&1 || true)
          else
            CREATE_OUT=$(gh pr create --base "$BASE_BRANCH" --head "$HEAD_BRANCH" --fill --label auto-generated 2>&1 || true)
          fi
          CREATE_RC=$?
          
          # Extract PR URL from the output (works for both success and "already exists" cases)
          PR_URL=""
          if [[ $CREATE_RC -eq 0 ]]; then
            # Success case: extract URL from output
            PR_URL=$(echo "$CREATE_OUT" | grep -o 'https://github.com/[^/]*/[^/]*/pull/[0-9]+' | head -1 || true)
          else
            log INFO "gh pr create exited with $CREATE_RC"
            printf "%s\n" "$CREATE_OUT" | sed 's/^/[gh] /' >/dev/null
            
            # Check if the error indicates an existing PR
            if echo "$CREATE_OUT" | grep -q "already exists"; then
              # Extract URL from the "already exists" message
              PR_URL=$(echo "$CREATE_OUT" | grep -o 'https://github.com/[^/]*/[^/]*/pull/[0-9]+' | head -1 || true)
            elif echo "$CREATE_OUT" | grep -q "No commits between"; then
              # Handle case where there are no unique commits to create a PR
              log INFO "No unique commits between $HEAD_BRANCH and $BASE_BRANCH; skipping PR creation"
              # Try to find existing PR anyway
              if [[ -n "$REPO" ]]; then
                PR_URL=$(gh pr list -R "$REPO" --state open --head "$HEAD_BRANCH" --json url -q '.[0].url' 2>/dev/null || true)
              else
                PR_URL=$(gh pr list --state open --head "$HEAD_BRANCH" --json url -q '.[0].url' 2>/dev/null || true)
              fi
            fi
          fi
          
          # Fallback: try to resolve PR URL via view/list if not found in output
          if [[ -z "$PR_URL" ]]; then
            if [[ -n "$REPO" ]]; then
              PR_URL=$(gh pr view -R "$REPO" --head "$HEAD_BRANCH" --json url -q .url 2>/dev/null || true)
            else
              PR_URL=$(gh pr view --head "$HEAD_BRANCH" --json url -q .url 2>/dev/null || true)
            fi
          fi
          if [[ -z "$PR_URL" ]]; then
            if [[ -n "$REPO" ]]; then
              PR_URL=$(gh pr list -R "$REPO" --state open --search "head:$HEAD_BRANCH base:$BASE_BRANCH" --json url -q '.[0].url' 2>/dev/null || true)
            else
              PR_URL=$(gh pr list -R "$REPO" --state open --head "$HEAD_BRANCH" --json url -q '.[0].url' 2>/dev/null || true)
            fi
          fi
          if [[ -n "$PR_URL" ]]; then
            log INFO "PR: $PR_URL"
          else
            log WARN "Unable to resolve PR URL. Try: gh pr create --base $BASE_BRANCH --head $HEAD_BRANCH --fill"
            log INFO "Also verify: gh auth status; and that branch is pushed to origin."
          fi
        fi
      fi
    else
      log WARN "GitHub CLI 'gh' not found; skipping PR creation. Install: https://cli.github.com/"
    fi
  fi
fi

exit "$TEST_RC"
