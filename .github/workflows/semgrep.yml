name: Semgrep

on:
  pull_request:
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: read
  security-events: write

jobs:
  semgrep:
    name: Sec Scan
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest

    # Add timeout to prevent hanging jobs
    timeout-minutes: 30

    # Use concurrency to cancel in-progress jobs on new commits
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Semgrep scan
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Summarize Semgrep findings to logs
        if: ${{ always() }}
        run: |
          python - << 'PY'
          import json
          import os
          import sys

          path = "semgrep.sarif"
          if not os.path.exists(path):
              print("Semgrep findings: 0 (no semgrep.sarif found)")
              sys.exit(0)

          try:
              with open(path, "r", encoding="utf-8") as f:
                  sarif = json.load(f)
              runs = sarif.get("runs") or []
              results = (runs[0].get("results") if runs else []) or []
              print(f"\nSemgrep findings: {len(results)}")
              for i, r in enumerate(results, start=1):
                  rule_id = r.get("ruleId") or (r.get("rule") or {}).get("id") or "unknown-rule"
                  level = r.get("level") or (r.get("properties") or {}).get("severity") or "note"
                  message = (r.get("message") or {}).get("text") or "(no message)"
                  loc = ((r.get("locations") or [None])[0] or {}).get("physicalLocation") or {}
                  file = (loc.get("artifactLocation") or {}).get("uri") or "unknown-file"
                  line = (loc.get("region") or {}).get("startLine") or 1
                  print(f"{i}. [{level}] {rule_id} at {file}:{line} - {message}")
          except Exception as e:
              print(f"Could not parse semgrep.sarif: {e}")
          PY

      # Note: Semgrep results are automatically published to the semgrep platform
      # via the publishToken in the semgrep-action step above

      - name: Comment PR with findings
        if: ${{ github.event_name == 'pull_request' && hashFiles('semgrep.sarif') != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const sarif = JSON.parse(fs.readFileSync('semgrep.sarif', 'utf8'));
              const results = sarif?.runs?.[0]?.results || [];
              const findings = results.length;
              if (findings > 0) {
                const listItems = results.slice(0, 10).map((r, i) => {
                  const ruleId = r.ruleId || r?.rule?.id || 'unknown-rule';
                  const level = r.level || r?.properties?.severity || 'note';
                  const message = r?.message?.text || '(no message)';
                  const loc = r?.locations?.[0]?.physicalLocation || {};
                  const file = loc?.artifactLocation?.uri || 'unknown-file';
                  const line = loc?.region?.startLine || 1;
                  return `- ${i+1}. [${level}] ${ruleId} at ${file}:${line}\n  ${message}`;
                }).join('\n');
                const comment = `## Semgrep Security Scan Results\n\n` +
                  `🔍 **${findings} security findings** detected` +
                  `\n\nTop findings (max 10):\n${listItems}\n\n` +
                  `_Full details available in the Semgrep platform._`;
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                console.log('Semgrep findings: 0. Skipping PR comment.');
              }
            } catch (error) {
              console.error('Error processing semgrep.sarif:', error.message);
            }

  local_semgrep:
    name: Local Semgrep Scan (isolated env)
    # Run ONLY under local Act; never on GitHub
    if: ${{ github.actor == 'nektos/act' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pipx and Semgrep (isolated)
        run: |
          if ! command -v ~/.local/bin/semgrep &> /dev/null; then
            echo "semgrep not found, installing..."
            python -m pip install --user pipx || true
            python -m pipx ensurepath || true
            ~/.local/bin/pipx install --force semgrep
          else
            echo "semgrep is already installed."
          fi

      - name: Run Semgrep scan (no metrics)
        run: |
          ~/.local/bin/semgrep ci \
            --config auto \
            --metrics off \
            --sarif \
            --output semgrep_local.sarif

      - name: Summarize Semgrep findings to logs
        if: ${{ always() }}
        run: |
          python - << 'PY'
          import json
          import os
          import sys

          path = "semgrep_local.sarif"
          if not os.path.exists(path):
              print("Semgrep findings: 0 (no semgrep_local.sarif found)")
              sys.exit(0)

          try:
              with open(path, "r", encoding="utf-8") as f:
                  sarif = json.load(f)
              runs = sarif.get("runs") or []
              results = (runs[0].get("results") if runs else []) or []
              print(f"\nSemgrep findings: {len(results)}")
              for i, r in enumerate(results, start=1):
                  rule_id = r.get("ruleId") or (r.get("rule") or {}).get("id") or "unknown-rule"
                  level = r.get("level") or (r.get("properties") or {}).get("severity") or "note"
                  message = (r.get("message") or {}).get("text") or "(no message)"
                  loc = ((r.get("locations") or [None])[0] or {}).get("physicalLocation") or {}
                  file = (loc.get("artifactLocation") or {}).get("uri") or "unknown-file"
                  line = (loc.get("region") or {}).get("startLine") or 1
                  print(f"{i}. [{level}] {rule_id} at {file}:{line} - {message}")
          except Exception as e:
              print(f"Could not parse semgrep_local.sarif: {e}")
          PY
