name: CI
# IMPORTANT: Integration and E2E tests require the full Docker stack and are excluded
# from GitHub CI runs entirely. They only run locally via act (nektos/act) on manual
# workflow_dispatch or scheduled runs. This prevents CI failures due to GitHub runner
# limitations with Docker services.

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main]
  workflow_dispatch: {} # Allows manual triggering for slow tests
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM for slow tests

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Ruff static analysis
        uses: astral-sh/ruff-action@v1
        with:
          version: "0.12.9"
          args: check --fix .
      - name: Ruff formatting check
        uses: astral-sh/ruff-action@v1
        with:
          version: "0.12.9"
          args: format --check .

  deptry:
    name: Deptry dependency health
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Setup Python + uv (cached)
        uses: ./.github/actions/setup-uv
      - name: Run deptry (JSON report)
        run: uvx --from deptry deptry . --json-output deptry_report.json
      - name: Upload deptry report
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: deptry-report
          path: deptry_report.json

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Setup Python + uv (cached)
        uses: ./.github/actions/setup-uv
      - name: Configure env for act (UV cache)
        if: ${{ github.actor == 'nektos/act' }}
        run: |
          echo "UV_CACHE_DIR=/uv-cache" >> "$GITHUB_ENV"
          echo "UV_LINK_MODE=copy" >> "$GITHUB_ENV"
      #- name: Seed pip in .venv
      #  run: uv venv --seed
      - name: Sync test env + check
        run: make uv-sync-test
      - name: Run unit tests (Makefile)
        run: make unit
      # Keep the cache small in CI (safe to no-op locally).
      #- name: Prune uv cache for CI
      #  run: uv cache prune --ci
      - name: Upload unit test reports
        # Skip under act (local GitHub Actions emulator) because ACTIONS_RUNTIME_TOKEN is not available.
        # On real GitHub runners, this will upload the reports/ directory as a build artifact.
        if: ${{ github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-unit
          path: reports/

  pyright:
    name: Pyright
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Setup Python + uv (cached)
        uses: ./.github/actions/setup-uv
      - name: Sync test env (Makefile)
        run: make uv-sync-test
      - name: Pyright (Makefile)
        run: make pyright

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Start test environment (compose --wait)
        run: make test-up
      - name: Prepare reports directories
        run: mkdir -p reports
      - name: Run integration tests
        run: make test-integration
      - name: Tear down services
        if: always()
        run: make test-down

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit_tests
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Start test environment (compose --wait)
        run: make test-up
      - name: Prepare reports directories
        run: mkdir -p reports
      - name: Run E2E tests
        run: make test-e2e
      - name: Tear down services
        if: always()
        run: make test-down

  ui:
    name: act manual - UI (Streamlit) tests
    if: ${{ github.actor == 'nektos/act' && github.event_name == 'workflow_dispatch' }}
    needs: unit_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
          clean: false # avoid deleting untracked files under act --bind
      - name: Setup Python + uv (cached)
        uses: ./.github/actions/setup-uv
      - name: Sync test env (uv)
        run: make uv-sync-test
      - name: Install Playwright browsers
        run: |
          uv run playwright install --with-deps
          uv run playwright --version
      - name: Start app stack (compose --wait)
        run: make app-up
      - name: Ensure Ollama model present
        env:
          OLLAMA_MODEL: cas/mistral-7b-instruct-v0.3
        run: make ollama-pull MODEL="$OLLAMA_MODEL"
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run UI tests only (Streamlit)
        env:
          PLAYWRIGHT_HEADLESS: "1"
        run: |
          uv run -m pytest tests/ui --no-cov \
            --html=reports/report_ui.html --self-contained-html \
            --junitxml=reports/junit_ui.xml
