name: CI
# NOTE FOR LOCAL CI (act):
# - The pre-push Git hook (.git/hooks/pre-push) runs these in order:
#     act pull_request -j lint --pull=false --log-prefix-job-id
#     act pull_request -j fast_tests --pull=false --log-prefix-job-id
# - To run this workflow manually with act:
#     act pull_request -j lint
#     act pull_request -j fast_tests

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev]
  workflow_dispatch: {} # Allows manual triggering for slow tests
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM for slow tests

env:
  # Default to CPU-only PyTorch wheels for smaller images and reliable installs
  PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
  # Enforce teardown of docker services in CI to avoid leftovers
  TEARDOWN_DOCKER: "1"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Ruff static analysis
        uses: astral-sh/ruff-action@v1
        with:
          version: "0.5.3"
          args: check --fix .
      - name: Ruff formatting check
        uses: astral-sh/ruff-action@v1
        with:
          version: "0.5.3"
          args: format --check .


  fast_tests:
    name: Fast Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Verify dependency health
        run: |
          python -m pip check
      - name: Prepare reports directories
        run: |
          mkdir -p reports
      - name: Run fast tests
        run: |
          # Fastest suite: run only unit tests (no external services)
          python -m pytest tests/unit -n auto --maxfail=1 -q --junitxml=reports/junit.xml

      - name: Upload fast test reports
        # Skip under act (local GitHub Actions emulator) because ACTIONS_RUNTIME_TOKEN is not available.
        # On real GitHub runners, this will upload the reports/ directory as a build artifact.
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-fast
          path: reports/

  pyright:
    name: Pyright
    if: ${{ github.actor != 'nektos/act' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Pyright type checking
        run: pyright


  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: fast_tests
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Prepare reports directories
        run: mkdir -p reports
      - name: Run integration tests
        run: >-
          python -m pytest tests/integration -q --junitxml=reports/junit_integration.xml
      - name: Upload integration test reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-integration
          path: reports/

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: fast_tests
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Build and start services
        run: docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for services to be ready
        run: |
          echo "Waiting for Weaviate..."
          timeout 180s bash -c 'until curl -s http://localhost:8080/v1/.well-known/ready; do sleep 5; done'
          echo "Waiting for Ollama..."
          timeout 180s bash -c 'until docker compose -f docker/docker-compose.yml exec -T ollama ollama list; do sleep 5; done'
      - name: Prepare reports directories
        run: mkdir -p reports
      - name: Run E2E tests
        run: >-
          python -m pytest tests/e2e -q --junitxml=reports/junit_e2e.xml
      - name: Tear down services
        if: always()
        run: docker compose -f docker/docker-compose.yml down -v
      - name: Upload E2E test reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-e2e
          path: reports/

  docker_smoke_tests:
    name: Docker Packaging Smoke Tests
    # Run only under local act to avoid GitHub runner RAM limits
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dev test dependencies on host
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Build app image (docker-compose)
        run: |
          docker compose -f docker/docker-compose.yml build app
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run docker-marked tests on host
        run: |
          python -m pytest -q -m docker \
            --html=reports/report_docker.html --self-contained-html \
            --junitxml=reports/junit_docker.xml
      - name: Upload docker smoke test reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-docker
          path: reports/

  ui_tests_act:
    name: act manual - UI (Streamlit) tests
    if: ${{ github.actor == 'nektos/act' && github.event_name == 'workflow_dispatch' }}
    needs: fast_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install UI dependencies
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -e .[ui] --root-user-action=ignore
      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps
          python -m playwright --version
      - name: Build and start local stack (GPU-capable compose)
        run: |
          docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for Weaviate readiness
        run: |
          timeout=180; until curl -s http://localhost:8080/v1/.well-known/ready >/dev/null 2>&1; do \
            echo "Waiting for Weaviate..."; sleep 5; timeout=$((timeout-5)); \
            if [ $timeout -le 0 ]; then echo "Weaviate not ready"; docker compose -f docker/docker-compose.yml logs weaviate; exit 1; fi; done
      - name: Wait for Ollama readiness
        run: |
          timeout=180; until docker compose -f docker/docker-compose.yml exec -T ollama ollama list >/dev/null 2>&1; do \
            echo "Waiting for Ollama..."; sleep 5; timeout=$((timeout-5)); \
            if [ $timeout -le 0 ]; then echo "Ollama not ready"; docker compose -f docker/docker-compose.yml logs ollama; exit 1; fi; done
      - name: Ensure Ollama model present (skip if exists)
        env:
          OLLAMA_MODEL: cas/mistral-7b-instruct-v0.3
        run: |
          set -e
          if docker compose -f docker/docker-compose.yml exec -T ollama ollama show "$OLLAMA_MODEL" >/dev/null 2>&1; then
            echo "Model $OLLAMA_MODEL already present; skipping pull."
          else
            echo "Pulling model $OLLAMA_MODEL ..."
            docker compose -f docker/docker-compose.yml exec -T ollama ollama pull "$OLLAMA_MODEL"
          fi
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run UI tests only (Streamlit)
        env:
          PLAYWRIGHT_HEADLESS: "1"
        run: |
          python -m pytest tests/ui --no-cov \
            --html=reports/report_ui.html --self-contained-html \
            --junitxml=reports/junit_ui.xml
      - name: Tear down local stack
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml down -v

  core_suite:
    name: Core Test Suite (manual/scheduled)
    # Heavy: enforce coverage threshold; only under local act (GitHub runners lack RAM for Dockerized tests)
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    needs: fast_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Install Playwright browsers (for UI/E2E if selected)
        run: |
          python -m playwright install --with-deps
          python -m playwright --version
      - name: Prepare reports directories
        run: |
          mkdir -p reports
      - name: Run core test suite (unit + integration, excludes UI)
        # Enforce coverage threshold for core suite
        run: |
          python -m pytest -v -n auto --cov-fail-under=60 tests/unit tests/integration \
            --html=reports/report_core.html --self-contained-html \
            --junitxml=reports/junit_core.xml
      - name: Upload core suite reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-core
          path: reports/

  # Local-only via act; manual dispatch; runs pytest -m slow against full stack
  slow_tests:
    name: act manual - slow tests (full stack)
    # Run only when launched manually via act (not on GitHub UI)
    if: ${{ github.actor == 'nektos/act' && github.event_name == 'workflow_dispatch' }}
    needs: fast_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false # ⬅️ do not store token in git config
      - name: Set up Python
        # Python is needed for the runner environment, but dependencies are inside the container
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
      - name: Install dev test dependencies on host
        run: |
          python -m pip install --upgrade pip --root-user-action=ignore
          pip install -r requirements-dev.txt --root-user-action=ignore
      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps
          python -m playwright --version
      - name: Build and start container stack
        run: |
          docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for Weaviate readiness
        run: |
          timeout=120; until curl -s http://localhost:8080/v1/.well-known/ready >/dev/null 2>&1; do \
            echo "Waiting for Weaviate..."; sleep 5; timeout=$((timeout-5)); if [ $timeout -le 0 ]; then echo "Weaviate not ready"; docker compose -f docker/docker-compose.yml logs weaviate; exit 1; fi; done
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run slow tests on host
        env:
          PLAYWRIGHT_HEADLESS: "1"
        run: |
          set -o pipefail
          # Ensure the app image is rebuilt without cache for packaging regressions
          docker compose -f docker/docker-compose.yml build --no-cache app
          # This command runs ONLY tests marked as 'slow' on the host runner
          python -m pytest -sv -m slow --no-cov \
            --html=reports/report_slow.html --self-contained-html --junitxml=reports/junit_slow.xml | tee pytest.log
          EXIT_CODE="${PIPESTATUS[0]}"
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo -e "\n🔴 Pytest failed — showing container logs for debugging:\n"
            docker compose -f docker/docker-compose.yml logs app || true
            docker compose -f docker/docker-compose.yml logs weaviate || true
            docker compose -f docker/docker-compose.yml logs ollama || true
            exit "$EXIT_CODE"
          fi
      - name: Upload slow test reports
        # Same: upload only on GitHub (not in act) due to missing ACTIONS_RUNTIME_TOKEN locally.
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-slow
          path: reports/
      - name: Tear down stack
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml down -v
