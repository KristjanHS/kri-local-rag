name: CI
# NOTE FOR LOCAL CI (act):
# - The pre-push Git hook (.git/hooks/pre-push) runs these in order:
#     act pull_request -j lint --pull=false --log-prefix-job-id
#     act pull_request -j fast_tests --pull=false --log-prefix-job-id
# - To run this workflow manually with act:
#     act pull_request -j lint
#     act pull_request -j fast_tests

on:
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch: # Allows manual triggering for slow tests
  schedule:
    - cron: "0 2 * * 0" # Weekly on Sunday at 2 AM for slow tests

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Verify dependency health
        run: |
          python -m pip check
      - name: Ruff static analysis
        run: |
          ruff check .
      - name: Ruff formatting check
        run: |
          ruff format --check .

  fast_tests:
    name: Fast Tests
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Prepare reports directories
        run: |
          mkdir -p reports
      - name: Run fast tests
        run: |
          # This command runs all tests NOT marked as 'slow'
          # based on the configuration in pytest.ini
          # In both GitHub and act (local), generate HTML & JUnit under reports/
          python -m pytest -m "not slow and not integration and not e2e and not environment and not ui and not docker" --html=reports/report.html --self-contained-html --junitxml=reports/junit.xml

      - name: Upload fast test reports
        # Skip under act (local GitHub Actions emulator) because ACTIONS_RUNTIME_TOKEN is not available.
        # On real GitHub runners, this will upload the reports/ directory as a build artifact.
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-fast
          path: reports/

  pyright:
    name: Pyright
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Pyright type checking
        run: pyright

  docker_smoke_tests:
    name: Docker Packaging Smoke Tests
    # Run only under local act to avoid GitHub runner RAM limits
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dev test dependencies on host
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Build app image (docker-compose)
        run: |
          docker compose -f docker/docker-compose.yml build app
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run docker-marked tests on host
        run: |
          python -m pytest -q -m docker \
            --html=reports/report_docker.html --self-contained-html \
            --junitxml=reports/junit_docker.xml
      - name: Upload docker smoke test reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-docker
          path: reports/

  gpu_docker_ollama_act:
    name: act manual - remaining tests (env + streamlit)
    if: ${{ github.actor == 'nektos/act' && github.event_name == 'workflow_dispatch' }}
    needs: fast_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dev test dependencies on host
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps
          python -m playwright --version
      - name: Build and start local stack (GPU-capable compose)
        run: |
          docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for Weaviate readiness
        run: |
          timeout=180; until curl -s http://localhost:8080/v1/.well-known/ready >/dev/null 2>&1; do \
            echo "Waiting for Weaviate..."; sleep 5; timeout=$((timeout-5)); \
            if [ $timeout -le 0 ]; then echo "Weaviate not ready"; docker compose -f docker/docker-compose.yml logs weaviate; exit 1; fi; done
      - name: Wait for Ollama readiness
        run: |
          timeout=180; until docker compose -f docker/docker-compose.yml exec -T ollama ollama list >/dev/null 2>&1; do \
            echo "Waiting for Ollama..."; sleep 5; timeout=$((timeout-5)); \
            if [ $timeout -le 0 ]; then echo "Ollama not ready"; docker compose -f docker/docker-compose.yml logs ollama; exit 1; fi; done
      - name: Ensure Ollama model present (skip if exists)
        env:
          OLLAMA_MODEL: cas/mistral-7b-instruct-v0.3
        run: |
          set -e
          if docker compose -f docker/docker-compose.yml exec -T ollama ollama show "$OLLAMA_MODEL" >/dev/null 2>&1; then
            echo "Model $OLLAMA_MODEL already present; skipping pull."
          else
            echo "Pulling model $OLLAMA_MODEL ..."
            docker compose -f docker/docker-compose.yml exec -T ollama ollama pull "$OLLAMA_MODEL"
          fi
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run e2e_streamlit smoke tests (no slow)
        env:
          PLAYWRIGHT_HEADLESS: "1"
        run: |
          python -m pytest -q tests/e2e_streamlit -m "e2e and not slow" \
            --no-cov \
            --html=reports/report_e2e_streamlit.html --self-contained-html \
            --junitxml=reports/junit_e2e_streamlit.xml
      - name: Run environment tests
        run: |
          python -m pytest -q -m environment \
            --html=reports/report_environment.html --self-contained-html \
            --junitxml=reports/junit_environment.xml
      - name: Tear down local stack
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml down -v

  full_suite:
    name: Full Test Suite (manual/scheduled)
    # Heavy: enforce coverage threshold; only under local act (GitHub runners lack RAM for Dockerized tests)
    if: ${{ github.actor == 'nektos/act' && (github.event_name == 'workflow_dispatch' || github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Install Playwright browsers (for UI/E2E if selected)
        run: |
          python -m playwright install --with-deps
          python -m playwright --version
      - name: Prepare reports directories
        run: |
          mkdir -p reports
      - name: Run full test suite (exclude only environment)
        # Enforce coverage threshold for full suite
        run: |
          python -m pytest -v -m "not environment" --cov-fail-under=60 \
            --html=reports/report_full.html --self-contained-html \
            --junitxml=reports/junit_full.xml
      - name: Upload full suite reports
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-full
          path: reports/

  # Local-only via act; manual dispatch; runs pytest -m slow against full stack
  slow_tests:
    name: act manual - slow tests (full stack)
    # Run only when launched manually via act (not on GitHub UI)
    if: ${{ github.actor == 'nektos/act' && github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        # Python is needed for the runner environment, but dependencies are inside the container
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: "requirements-dev.txt"
      - name: Install dev test dependencies on host
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Install Playwright browsers
        run: |
          python -m playwright install --with-deps
          python -m playwright --version
      - name: Build and start container stack
        run: |
          docker compose -f docker/docker-compose.yml up -d --build
      - name: Wait for Weaviate readiness
        run: |
          timeout=120; until curl -s http://localhost:8080/v1/.well-known/ready >/dev/null 2>&1; do \
            echo "Waiting for Weaviate..."; sleep 5; timeout=$((timeout-5)); if [ $timeout -le 0 ]; then echo "Weaviate not ready"; docker compose -f docker/docker-compose.yml logs weaviate; exit 1; fi; done
      - name: Prepare reports directories
        run: |
          mkdir -p reports/logs
      - name: Run slow tests on host
        env:
          PLAYWRIGHT_HEADLESS: "1"
        run: |
          set -o pipefail
          # Ensure the app image is rebuilt without cache for packaging regressions
          docker compose -f docker/docker-compose.yml build --no-cache app
          # This command runs ONLY tests marked as 'slow' on the host runner
          python -m pytest -sv -m slow --no-cov \
            --html=reports/report_slow.html --self-contained-html --junitxml=reports/junit_slow.xml | tee pytest.log
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo -e "\n🔴 Pytest failed — showing container logs for debugging:\n"
            docker compose -f docker/docker-compose.yml logs app || true
            docker compose -f docker/docker-compose.yml logs weaviate || true
            docker compose -f docker/docker-compose.yml logs ollama || true
            exit $EXIT_CODE
          fi
      - name: Upload slow test reports
        # Same: upload only on GitHub (not in act) due to missing ACTIONS_RUNTIME_TOKEN locally.
        if: ${{ always() && github.actor != 'nektos/act' }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-slow
          path: reports/
      - name: Tear down stack
        if: always()
        run: |
          docker compose -f docker/docker-compose.yml down -v
