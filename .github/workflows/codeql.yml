name: CodeQL

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "0 2 * * 1"  # weekly, Mon 02:00 UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    
    
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 360
    
    # Use concurrency to cancel in-progress jobs on new commits
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: read
    
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          # Skip upload under Act and forked PRs; still produce SARIF locally
          upload: ${{ github.actor != 'nektos/act' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false) }}
          output: codeql-results.sarif

      - name: Summarize CodeQL findings (local only)
        if: ${{ env.ACT == 'true' || github.actor == 'nektos/act' }}
        run: |
          python - <<'PY'
import json, sys, os
path = 'codeql-results.sarif'
if not os.path.exists(path):
    print('No SARIF file produced by CodeQL (codeql-results.sarif). Assuming no findings for local gate.')
    sys.exit(0)
with open(path, 'r', encoding='utf-8') as f:
    sarif = json.load(f)
results = (sarif.get('runs') or [{}])[0].get('results') or []
count = len(results)
print(f'CodeQL findings: {count}')
if count > 0:
    # Print top 20 findings concisely
    for i, r in enumerate(results[:20], 1):
        msg = (r.get('message') or {}).get('text') or ''
        loc = ((r.get('locations') or [{}])[0].get('physicalLocation') or {})
        file = (loc.get('artifactLocation') or {}).get('uri') or 'unknown-file'
        line = (loc.get('region') or {}).get('startLine') or 1
        rule = r.get('ruleId') or 'unknown-rule'
        print(f"{i}. {rule} at {file}:{line} - {msg}")
    print('Note: Local run under Act is informational. Review the findings above and the Security tab in GitHub when uploaded.')
PY
